//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:2.0.50727.3603
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SnookerCore
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContractTeam", Namespace="http://schemas.datacontract.org/2004/07/SnookerCore")]
    public partial class ContractTeam : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int BallOnIndexField;
        
        private int[] FoulListField;
        
        private int IdField;
        
        private bool JustSwappedField;
        
        private SnookerCore.ContractPerson[] PlayersField;
        
        private int PointsField;
        
        private int ShotCountField;
        
        private int StrengthField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BallOnIndex
        {
            get
            {
                return this.BallOnIndexField;
            }
            set
            {
                this.BallOnIndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] FoulList
        {
            get
            {
                return this.FoulListField;
            }
            set
            {
                this.FoulListField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool JustSwapped
        {
            get
            {
                return this.JustSwappedField;
            }
            set
            {
                this.JustSwappedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SnookerCore.ContractPerson[] Players
        {
            get
            {
                return this.PlayersField;
            }
            set
            {
                this.PlayersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points
        {
            get
            {
                return this.PointsField;
            }
            set
            {
                this.PointsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShotCount
        {
            get
            {
                return this.ShotCountField;
            }
            set
            {
                this.ShotCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Strength
        {
            get
            {
                return this.StrengthField;
            }
            set
            {
                this.StrengthField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContractPerson", Namespace="http://schemas.datacontract.org/2004/07/SnookerCore")]
    public partial class ContractPerson : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private byte[] ImageByteArrayField;
        
        private int IndexField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImageByteArray
        {
            get
            {
                return this.ImageByteArrayField;
            }
            set
            {
                this.ImageByteArrayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index
        {
            get
            {
                return this.IndexField;
            }
            set
            {
                this.IndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Shot", Namespace="http://schemas.datacontract.org/2004/07/SnookerCore")]
    public partial class Shot : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int CurrentTeamScoreField;
        
        private bool GameOverField;
        
        private bool HasFinishedTurnField;
        
        private int OtherTeamScoreField;
        
        private SnookerCore.Snapshot[] SnapshotListField;
        
        private int TeamIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentTeamScore
        {
            get
            {
                return this.CurrentTeamScoreField;
            }
            set
            {
                this.CurrentTeamScoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GameOver
        {
            get
            {
                return this.GameOverField;
            }
            set
            {
                this.GameOverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasFinishedTurn
        {
            get
            {
                return this.HasFinishedTurnField;
            }
            set
            {
                this.HasFinishedTurnField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OtherTeamScore
        {
            get
            {
                return this.OtherTeamScoreField;
            }
            set
            {
                this.OtherTeamScoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SnookerCore.Snapshot[] SnapshotList
        {
            get
            {
                return this.SnapshotListField;
            }
            set
            {
                this.SnapshotListField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamId
        {
            get
            {
                return this.TeamIdField;
            }
            set
            {
                this.TeamIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Snapshot", Namespace="http://schemas.datacontract.org/2004/07/SnookerCore")]
    public partial class Snapshot : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private SnookerCore.BallPosition[] ballPositionListField;
        
        private int snapshotNumberField;
        
        private SnookerCore.GameSound soundField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public SnookerCore.BallPosition[] ballPositionList
        {
            get
            {
                return this.ballPositionListField;
            }
            set
            {
                this.ballPositionListField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int snapshotNumber
        {
            get
            {
                return this.snapshotNumberField;
            }
            set
            {
                this.snapshotNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public SnookerCore.GameSound sound
        {
            get
            {
                return this.soundField;
            }
            set
            {
                this.soundField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BallPosition", Namespace="http://schemas.datacontract.org/2004/07/SnookerCore")]
    public partial class BallPosition : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ballIndexField;
        
        private bool isBallInPocketField;
        
        private int snapshotNumberField;
        
        private int xField;
        
        private int yField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ballIndex
        {
            get
            {
                return this.ballIndexField;
            }
            set
            {
                this.ballIndexField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isBallInPocket
        {
            get
            {
                return this.isBallInPocketField;
            }
            set
            {
                this.isBallInPocketField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int snapshotNumber
        {
            get
            {
                return this.snapshotNumberField;
            }
            set
            {
                this.snapshotNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSound", Namespace="http://schemas.datacontract.org/2004/07/SnookerCore")]
    public enum GameSound : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bank01 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bank02 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Click01 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Click02 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fall = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hit01 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hit02 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hit03 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hit04 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hit05 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hit06 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shot01 = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Jungle = 13,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ISnooker", CallbackContract=typeof(ISnookerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface ISnooker
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ISnooker/Play")]
    void Play(SnookerCore.ContractTeam team, SnookerCore.ContractPerson name, SnookerCore.Shot shot);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISnooker/Play")]
    System.IAsyncResult BeginPlay(SnookerCore.ContractTeam team, SnookerCore.ContractPerson name, SnookerCore.Shot shot, System.AsyncCallback callback, object asyncState);
    
    void EndPlay(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISnooker/Join", ReplyAction="http://tempuri.org/ISnooker/JoinResponse")]
    SnookerCore.ContractTeam[] Join(SnookerCore.ContractPerson name);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISnooker/Join", ReplyAction="http://tempuri.org/ISnooker/JoinResponse")]
    System.IAsyncResult BeginJoin(SnookerCore.ContractPerson name, System.AsyncCallback callback, object asyncState);
    
    SnookerCore.ContractTeam[] EndJoin(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ISnooker/Leave")]
    void Leave();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ISnooker/Leave")]
    System.IAsyncResult BeginLeave(System.AsyncCallback callback, object asyncState);
    
    void EndLeave(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ISnookerCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISnooker/Receive")]
    void Receive(SnookerCore.ContractPerson sender, string message);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISnooker/Receive")]
    System.IAsyncResult BeginReceive(SnookerCore.ContractPerson sender, string message, System.AsyncCallback callback, object asyncState);
    
    void EndReceive(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISnooker/ReceivePlay")]
    void ReceivePlay(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person, SnookerCore.Shot shot);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISnooker/ReceivePlay")]
    System.IAsyncResult BeginReceivePlay(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person, SnookerCore.Shot shot, System.AsyncCallback callback, object asyncState);
    
    void EndReceivePlay(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISnooker/UserEnter")]
    void UserEnter(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISnooker/UserEnter")]
    System.IAsyncResult BeginUserEnter(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person, System.AsyncCallback callback, object asyncState);
    
    void EndUserEnter(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISnooker/UserLeave")]
    void UserLeave(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISnooker/UserLeave")]
    System.IAsyncResult BeginUserLeave(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person, System.AsyncCallback callback, object asyncState);
    
    void EndUserLeave(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISnooker/WaitForUserShot")]
    void WaitForUserShot(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISnooker/WaitForUserShot")]
    System.IAsyncResult BeginWaitForUserShot(SnookerCore.ContractTeam team, SnookerCore.ContractPerson person, System.AsyncCallback callback, object asyncState);
    
    void EndWaitForUserShot(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ISnookerChannel : ISnooker, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class SnookerClient : System.ServiceModel.DuplexClientBase<ISnooker>, ISnooker
{
    
    public SnookerClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public SnookerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public SnookerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public SnookerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public SnookerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public void Play(SnookerCore.ContractTeam team, SnookerCore.ContractPerson name, SnookerCore.Shot shot)
    {
        base.Channel.Play(team, name, shot);
    }
    
    public System.IAsyncResult BeginPlay(SnookerCore.ContractTeam team, SnookerCore.ContractPerson name, SnookerCore.Shot shot, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginPlay(team, name, shot, callback, asyncState);
    }
    
    public void EndPlay(System.IAsyncResult result)
    {
        base.Channel.EndPlay(result);
    }
    
    public SnookerCore.ContractTeam[] Join(SnookerCore.ContractPerson name)
    {
        return base.Channel.Join(name);
    }
    
    public System.IAsyncResult BeginJoin(SnookerCore.ContractPerson name, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginJoin(name, callback, asyncState);
    }
    
    public SnookerCore.ContractTeam[] EndJoin(System.IAsyncResult result)
    {
        return base.Channel.EndJoin(result);
    }
    
    public void Leave()
    {
        base.Channel.Leave();
    }
    
    public System.IAsyncResult BeginLeave(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginLeave(callback, asyncState);
    }
    
    public void EndLeave(System.IAsyncResult result)
    {
        base.Channel.EndLeave(result);
    }
}
